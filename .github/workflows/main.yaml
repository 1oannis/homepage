name: CI/CD Pipeline

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    code-quality:
        runs-on: ubuntu-latest

        env:
          STORE_PATH: ~/.pnpm-store
    
        steps:
          - name: Checkout
            uses: actions/checkout@v4
    
          - name: Install Node.js
            uses: actions/setup-node@v4
            with:
              node-version: 20
    
          - uses: pnpm/action-setup@v4
            name: Install pnpm
            with:
              version: latest
              run_install: false
    
          - name: Get pnpm store directory
            shell: bash
            run: |
              echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
          - uses: actions/cache@v4
            name: Setup pnpm cache
            with:
              path: ${{ env.STORE_PATH }}
              key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
              restore-keys: |
                ${{ runner.os }}-pnpm-store-
    
          - name: Install dependencies
            run: pnpm install

          - name: Run ESLint
            run: pnpm lint

    # security-check:
    #     runs-on: ubuntu-latest
    #     steps:
    #           - name: Checkout code
    #             uses: actions/checkout@v2
    
    #           - name: Set up Node.js
    #             uses: actions/setup-node@v2
    #             with:
    #               node-version: '14'
    
    #           - name: Install dependencies
    #             run: npm install
    
    #           - name: Run security check
    #             run: npm audit

    build:
        runs-on: ubuntu-latest
        needs: [code-quality] # , security-check]

        env:
          STORE_PATH: ~/.pnpm-store
    
        steps:
          - name: Checkout
            uses: actions/checkout@v4
    
          - name: Install Node.js
            uses: actions/setup-node@v4
            with:
              node-version: 20
    
          - uses: pnpm/action-setup@v4
            name: Install pnpm
            with:
              version: latest
              run_install: false
    
          - name: Get pnpm store directory
            shell: bash
            run: |
              echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
          - uses: actions/cache@v4
            name: Setup pnpm cache
            with:
              path: ${{ env.STORE_PATH }}
              key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
              restore-keys: |
                ${{ runner.os }}-pnpm-store-
    
          - name: Install dependencies
            run: pnpm install

          - name: Build
            run: pnpm build

    # dockerize:
    #     runs-on: ubuntu-latest
    #     needs: build
    #     steps:
    #           - name: Checkout code
    #             uses: actions/checkout@v2
    
    #           - name: Log in to Docker Hub
    #             run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    
    #           - name: Build Docker image
    #             run: docker build -t myapp:latest .
    
    #           - name: Push Docker image
    #             run: docker tag myapp:latest ${{ secrets.DOCKER_USERNAME }}/myapp:latest
    #             run: docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest

    # deploy:
    #     runs-on: ubuntu-latest
    #     needs: dockerize
    #     steps:
    #           - name: Checkout code
    #             uses: actions/checkout@v2
    
    #           - name: Deploy to VM
    #             uses: appleboy/ssh-action@v0.1.5
    #             with:
    #               host: ${{ secrets.VM_HOST }}
    #               username: ${{ secrets.VM_USER }}
    #               key: ${{ secrets.VM_KEY }}
    #               script: |
    #                 docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:latest
    #                 docker stop myapp || true
    #                 docker rm myapp || true
    #                 docker run -d --name myapp -p 80:80 ${{ secrets.DOCKER_USERNAME }}/myapp:latest